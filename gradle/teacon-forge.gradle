import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.provider.Provider
import org.gradle.api.tasks.InputFile
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.bundling.AbstractArchiveTask

interface TeaConExtension {
    // get the mod id
    Property<String> getModId()
    // get the mod name
    Property<String> getModName()
    // get the mod version
    Property<String> getModVersion()
    // get the mod license
    Property<String> getModLicense()
    // get the github repo
    Property<String> getModGitHubRepo()
    // get the github repo
    ListProperty<String> getModAuthors()
    // get the github branch
    Property<String> getModGitHubBranch()
    // get the mod description
    Property<String> getModDescription()
    // get Minecraft version
    Property<String> getMinecraftVersion()
    // get the platform which should be 'forge-1.1x.x-xx.x.x'
    Property<String> getPlatform()
    // get the parchment mapping version which should be either '20xx.xx.xx' or null
    Property<String> getParchment()
    // check if access transformer is used
    Property<Boolean> getModifyMemberAccess()
    // check if data generation is used
    Property<Boolean> getUseDataGeneration()
}

abstract class TeaConDumpPathToGitHub extends DefaultTask {
    @Input
    abstract Property<String> getPublishName()
    @InputFile
    abstract RegularFileProperty getTargetFile()
    @TaskAction
    void check() {
        if (System.env.GITHUB_ACTIONS) {
            File theFile = targetFile.getAsFile().get()

            def outputFile = new File(System.env.GITHUB_OUTPUT)
            // Use the env-specific line separator for maximally possible compatibility
            def newLine = System.getProperty('line.separator')

            // Write out new env variable for later usage
            outputFile << newLine << "artifact_name=${theFile.getName()}"
            outputFile << newLine << "artifact_publish_name=${publishName.get()}"
            outputFile << newLine << "artifact_path=${theFile.absolutePath}"
        }
    }
}

gradle.afterProject { Project current ->
    if (current != project) return

    def teacon = current.extensions.teacon as TeaConExtension

    def mcVer = teacon.minecraftVersion.get()

    def modId = teacon.modId.get()
    def artifactVersion = teacon.modVersion.get()
    def (repoAuthor, repoName) = teacon.modGitHubRepo.get().split('/', 2)

    // check mod id
    assert modId ==~ /[a-z_\d]+/

    // check if it is from teacon
    if (repoAuthor != 'teaconmc') {
        logger.log(LogLevel.WARN,
                'An project whose repo not under https://github.com/teaconmc is configured. Use at your own risk.')
    }

    current.group = 'org.teacon'
    current.version = artifactVersion
    current.archivesBaseName = repoName

    def useDataGeneration = teacon.useDataGeneration.getOrElse(false)

    // check if generated source is included
    if (useDataGeneration) {
        current.sourceSets.main.resources { it.srcDir 'src/generated/resources' }
    }

    current.neoForge { it ->
        it.version = teacon.platform.get()

        def modifyMemberAccess = teacon.modifyMemberAccess.getOrElse(false)
        if (modifyMemberAccess) {
            it.accessTransformers {
                file('src/main/resources/META-INF/accesstransformer.cfg')
            }
        }
        it.parchment {
            mappingsVersion = teacon.parchment.get()
            minecraftVersion = teacon.minecraftVersion.get()
        }
        it.mods {
            // define mod <-> source bindings
            // these are used to tell the game which sources are for which mod
            // mostly optional in a single mod project
            // but multi mod projects should define one per mod
            "${modId}" {
                sourceSet(sourceSets.main)
            }
        }
        it.runs {
            client {
                client()
                gameDirectory = current.file('run_client')
                systemProperty 'neoforge.enabledGameTestNamespaces', modId
            }

            server {
                server()
                gameDirectory = current.file('run_server')
                programArgument '--nogui'
                systemProperty 'neoforge.enabledGameTestNamespaces', modId
            }

            // This run config launches GameTestServer and runs all registered gametests, then exits.
            // By default, the server will crash when no gametests are provided.
            // The gametest system is also enabled by default for other run configs under the /test command.
            gameTestServer {
                type = "gameTestServer"
                gameDirectory = current.file('run_gametest')
                systemProperty 'neoforge.enabledGameTestNamespaces', modId
            }

            if (useDataGeneration) {
                data {
                    data()

                    gameDirectory = current.file('run_data')

                    // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
                    programArguments.addAll '--mod', modId, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
                }
            }
        }
    }

    current.sourceSets.main.resources { srcDir 'src/generated/resources' }

    // noinspection GroovyAssignabilityCheck
    def generateArtifactAttributes = { String name, String specVersion, String implVersion ->
        return [
                "Specification-Title"     : name,
                "Specification-Vendor"    : "TeaConMC",
                "Specification-Version"   : specVersion,
                "Implementation-Title"    : name,
                "Implementation-Version"  : implVersion,
                "Implementation-Vendor"   : "TeaConMC",
        ]
    }

    def identifier = System.env.VERSION_IDENTIFIER

    def publishJarTask = current.tasks.jar
    def jarArchiveBaseName = "${repoName}-NeoForge-${mcVer}" as String

    // configure jar and re-obf
    publishJarTask.configure { Jar it ->
        it.archiveBaseName.set(jarArchiveBaseName)
        it.archiveVersion.set("${artifactVersion}${identifier ? '-' + identifier : ''}")
        it.manifest.attributes(generateArtifactAttributes(repoName, '1', it.archiveVersion.get()) as Map<String, ?>)
    }

    def modAuthors = teacon.modAuthors.getOrElse([])
    // noinspection GroovyAssignabilityCheck
    def modName = teacon.modName.getOrElse(repoName)

    def publishBranchName = teacon.modGitHubBranch.getOrElse("${mcVer}-neoforge")
    def publishPomName = "${repoName} for Minecraft ${mcVer}" as String
    def publishDescription = teacon.modDescription.getOrElse(publishPomName)
    def publishLicense = teacon.modLicense.get()

    // configure maven publishing
    current.publishing { PublishingExtension it ->
        it.publications {
            // noinspection GroovyAssignabilityCheck
            release(MavenPublication) {
                // noinspection GroovyAssignabilityCheck
                groupId = "org.teacon"
                // noinspection GroovyAssignabilityCheck
                artifactId = jarArchiveBaseName
                // noinspection GroovyAssignabilityCheck
                version = artifactVersion
                pom {
                    // noinspection GroovyAssignabilityCheck
                    name = publishPomName
                    // noinspection GroovyAssignabilityCheck
                    description = publishDescription != null ? publishDescription : publishPomName
                    // noinspection GroovyAssignabilityCheck
                    url = "https://github.com/${repoAuthor}/${repoName}"
                    licenses {
                        license {
                            // noinspection GroovyAssignabilityCheck
                            name = publishLicense
                            // noinspection GroovyAssignabilityCheck
                            url = "https://github.com/${repoAuthor}/${repoName}/blob/${publishBranchName}/LICENSE"
                        }
                    }
                    organization {
                        // noinspection GroovyAssignabilityCheck
                        name = 'TeaConMC'
                        // noinspection GroovyAssignabilityCheck
                        url = 'https://github.com/teaconmc'
                    }
                    developers {
                        for (def modAuthor : modAuthors) {
                            assert modAuthor == (modAuthor =~ /^\s+|\s+$/).replaceAll('')

                            def matcher = modAuthor =~ /([^(\s]+)\s*\(([^)]+)\)/
                            def modAuthorName = modAuthor

                            if (matcher.matches()) {
                                modAuthor = matcher.group(1)
                                modAuthorName = matcher.group(2)
                            }

                            developer {
                                // noinspection GroovyAssignabilityCheck
                                id = modAuthor
                                // noinspection GroovyAssignabilityCheck
                                name = modAuthorName
                            }
                        }
                    }
                    issueManagement {
                        // noinspection GroovyAssignabilityCheck
                        system = 'GitHub Issues'
                        // noinspection GroovyAssignabilityCheck
                        url = "https://github.com/${repoAuthor}/${repoName}/issues"
                    }
                    scm {
                        // noinspection GroovyAssignabilityCheck
                        url = "https://github.com/${repoAuthor}/${repoName}"
                        // noinspection GroovyAssignabilityCheck
                        connection = "scm:git:git://github.com/${repoAuthor}/${repoName}.git"
                        // noinspection GroovyAssignabilityCheck
                        developerConnection = "scm:git:git@github.com:${repoAuthor}/${repoName}.git"
                    }
                }
                // noinspection GroovyAssignabilityCheck
                artifact publishJarTask
            }
        }
        it.repositories {
            maven {
                name = "teacon"
                url = "s3://maven/"
                credentials(AwsCredentials) {
                    accessKey = System.env.ARCHIVE_ACCESS_KEY
                    secretKey = System.env.ARCHIVE_SECRET_KEY
                }
            }
        }
    }

    current.tasks.withType(PublishToMavenRepository).configureEach {
        if (repository && repository.name == "archive") {
            it.onlyIf {
                System.env.MAVEN_USERNAME && System.env.MAVEN_PASSWORD
            }
        }
    }

    // A simple task to pass down the artifact name and path to other GitHub actions
    current.tasks.register("githubActionOutput", TeaConDumpPathToGitHub) { task ->
        task.onlyIf {
            System.env.GITHUB_ACTIONS
        }
        task.getPublishName().set("${jarArchiveBaseName}-${artifactVersion}.jar")
        task.getTargetFile().set(publishJarTask.archiveFile)
    }

    // A task for generating mods.toml
    current.tasks.register("printModMeta") {
        it.doLast {
            // noinspection GroovyAssignabilityCheck
            def escaped = { String input ->
                input = input.replace('\"', '\\\"')
                input = input.replace('\b', '\\\b')
                input = input.replace('\f', '\\\f')
                input = input.replace('\n', '\\\n')
                input = input.replace('\r', '\\\r')
                input = input.replace('\t', '\\\t')
                return input
            }

            def lines = []

            // loaders
            lines += "modLoader=\"javafml\""
            lines += "loaderVersion=\"1\""
            lines += "license=\"${escaped(publishLicense)}\""
            lines += ""

            // mods
            lines += "[[mods]]"
            lines += "modId=\"${escaped(modId)}\""
            lines += "version=\"\${file.jarVersion}\""
            lines += "displayName=\"${escaped(modName)}\""
            lines += "authors=\"TeaConMC${modAuthors.collect { ', ' + escaped(it) }.join()}\""
            lines += "displayName=\"${escaped(publishDescription)}\""
            lines += ""

            // neoforge dependency
            lines += "[[dependencies.${modId}]]"
            lines += "modId=\"neoforge\""
            lines += "type=required"
            lines += "versionRange=\"[${escaped(teacon.platform.get())},)\""
            lines += "ordering=\"NONE\""
            lines += "side=\"BOTH\""
            lines += ""

            // minecraft dependency
            lines += "[[dependencies.${modId}]]"
            lines += "modId=\"minecraft\""
            lines += "type=required"
            lines += "versionRange=\"[${escaped(mcVer)},)\""
            lines += "ordering=\"NONE\""
            lines += "side=\"BOTH\""
            lines += ""

            // print lines
            lines.each { println it }
        }
    }
}

project.extensions.create('teacon', TeaConExtension)